javascript:(async () => {  if (window.streamClipper) {    window.streamClipper.stop();    window.streamClipper = null;    alert("Clip stopped and saved.");    return;  }  const video = document.querySelector("video");  if (!video) return alert("No video element found.");  const filename = prompt("Enter clip name (without extension):", "clip");  if (!filename) return;  const videoStream = video.captureStream?.()%20||%20video.mozCaptureStream?.();%20%20if%20(!videoStream%20||%20!videoStream.getVideoTracks().length)%20return%20alert(%22This%20stream%20cannot%20be%20recorded%20(DRM%20or%20site%20restrictions).%22);%20%20let%20audioTracks%20=%20[];%20%20try%20{%20%20%20%20const%20audioCtx%20=%20new%20AudioContext();%20%20%20%20const%20src%20=%20audioCtx.createMediaElementSource(video);%20%20%20%20const%20dest%20=%20audioCtx.createMediaStreamDestination();%20%20%20%20src.connect(dest);%20%20%20%20src.connect(audioCtx.destination);%20%20%20%20audioTracks%20=%20dest.stream.getAudioTracks();%20%20}%20catch%20{%20%20%20%20alert(%22Audio%20cannot%20be%20captured%20from%20this%20stream%20(CORS%20or%20DRM).%20Video-only%20recording%20will%20continue.%22);%20%20}%20%20const%20combined%20=%20new%20MediaStream([...videoStream.getVideoTracks(),%20...audioTracks]);%20%20const%20chunks%20=%20[];%20%20const%20recorder%20=%20new%20MediaRecorder(combined,%20{mimeType:%20%22video/webm%22});%20%20recorder.ondataavailable%20=%20e%20=%3E%20e.data.size%20&&%20chunks.push(e.data);%20%20recorder.onstop%20=%20()%20=%3E%20{%20%20%20%20const%20blob%20=%20new%20Blob(chunks,%20{type:%20%22video/webm%22});%20%20%20%20const%20url%20=%20URL.createObjectURL(blob);%20%20%20%20const%20a%20=%20Object.assign(document.createElement(%22a%22),%20{href:%20url,%20download:%20filename%20+%20%22.webm%22});%20%20%20%20a.click();%20%20%20%20URL.revokeObjectURL(url);%20%20};%20%20recorder.start();%20%20window.streamClipper%20=%20recorder;%20%20alert(%22Clipping%20started.%20Run%20again%20to%20stop%20and%20save.%22);})();