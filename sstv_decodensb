{python:
load {av}
import numpy as np
from scipy.io import wavfile
from scipy import signal
from PIL import Image
import os

# Load audio file
audio_path = os.getenv('FILE_1')
sample_rate, audio_data = wavfile.read(audio_path)

# Convert to mono if stereo
if len(audio_data.shape) > 1:
    audio_data = audio_data.mean(axis=1)

# Normalize audio
audio_data = audio_data.astype(np.float32)

# SSTV parameters for Robot 36 mode
SYNC_FREQ = 1200  # Hz
BLACK_FREQ = 1500  # Hz
WHITE_FREQ = 2300  # Hz
SCAN_TIME = 0.088  # seconds per line for Robot 36
IMAGE_WIDTH = 320
IMAGE_HEIGHT = 240

def decode_frequency(audio_chunk, sample_rate):
    """Decode frequency from audio chunk using FFT"""
    fft = np.fft.rfft(audio_chunk)
    freqs = np.fft.rfftfreq(len(audio_chunk), 1/sample_rate)
    magnitude = np.abs(fft)
    peak_freq = freqs[np.argmax(magnitude)]
    return peak_freq

def freq_to_pixel(freq):
    """Convert frequency to pixel value (0-255)"""
    if freq < BLACK_FREQ:
        return 0
    elif freq > WHITE_FREQ:
        return 255
    else:
        return int(255 * (freq - BLACK_FREQ) / (WHITE_FREQ - BLACK_FREQ))

# Decode SSTV
samples_per_pixel = int(sample_rate * SCAN_TIME / IMAGE_WIDTH)
image_array = np.zeros((IMAGE_HEIGHT, IMAGE_WIDTH, 3), dtype=np.uint8)

print(f"decoding sstv signal...")
print(f"sample rate: {sample_rate} hz")
print(f"audio length: {len(audio_data)/sample_rate:.2f} seconds")

for line in range(IMAGE_HEIGHT):
    for pixel in range(IMAGE_WIDTH):
        start_idx = line * IMAGE_WIDTH * samples_per_pixel + pixel * samples_per_pixel
        end_idx = start_idx + samples_per_pixel
        
        if end_idx > len(audio_data):
            break
            
        chunk = audio_data[start_idx:end_idx]
        freq = decode_frequency(chunk, sample_rate)
        pixel_value = freq_to_pixel(freq)
        
        # RGB channels (simplified - actual SSTV has separate R, G, B scans)
        image_array[line, pixel] = [pixel_value, pixel_value, pixel_value]
    
    if (line + 1) % 20 == 0:
        print(f"decoded {line + 1}/{IMAGE_HEIGHT} lines")

# Save image
img = Image.fromarray(image_array)
img.save('/home/notsocoder/output/sstv_decoded.png')
print("sstv image decoded and saved")
}